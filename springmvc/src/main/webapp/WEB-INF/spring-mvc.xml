<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- 自动扫描且只扫描@Controller -->
    <context:component-scan base-package="com.yao.app" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>
    
    <!-- 默认的注解映射的支持AnnotationDrivenBeanDefinitionParser -->
    <!-- <mvc:annotation-driven /> 会自动注册RequestMappingHandlerMapping, RequestMappingHandlerAdapter, ExceptionHandlerExceptionResolver等bean, 
        是spring MVC为@Controllers分发请求所必须的。 -->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <!-- 会导致converterlist中包含2个StringHttpMessageConverters，不过这里的出现在前边，所以这样配置也可以 -->
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>
            <!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="prettyPrint" value="true"/>
            </bean>         
        </mvc:message-converters>
    </mvc:annotation-driven>
    
    <!-- 视图解释类，定义跳转的文件的前后缀 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    
    <!-- <bean id="templateResolver"
        class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
        <property name="prefix" value="/WEB-INF/thymeleaf/" />
        <property name="suffix" value=".html" />
        <property name="templateMode" value="HTML5" />
        <property name="cacheable" value="false" />
    </bean>
    
    <bean id="templateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine">
        <property name="templateResolver" ref="templateResolver" />
    </bean>
    
    <bean class="org.thymeleaf.spring3.view.ThymeleafViewResolver">
        <property name="templateEngine" ref="templateEngine" />
        <property name="order" value="1" />
        <property name="viewNames" value="*.html" />
        <property name="characterEncoding" value="UTF-8"></property>
    </bean> -->
    
    <!-- 静态资源使用httpd或nginx处理最好-->
    <!-- 对静态资源文件的访问 方案一 （二选一） -->
    <!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL-->   
    <mvc:default-servlet-handler />

    <!-- 对静态资源文件的访问 方案二 （二选一） -->
    <!-- <mvc:resources mapping="/images/**" location="/images/" cache-period="31556926" 
        /> <mvc:resources mapping="/js/**" location="/js/" cache-period="31556926" 
        /> <mvc:resources mapping="/css/**" location="/css/" cache-period="31556926" 
        /> -->
    
    <mvc:interceptors>
        <bean id="officeHoursInterceptor" class="com.yao.app.springmvc.web.interceptors.TimeBasedAccessInterceptor"></bean>
        <mvc:interceptor>
            <mvc:mapping path="/users/*"/>
            <bean id="myInterceptor" class="com.yao.app.springmvc.web.interceptors.MyMappedInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>
    
    <!-- 将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果 -->
    <!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="exceptionMappings">  
            <props>  
                <prop key="java.lang.Throwable">error/500</prop>
            </props>  
        </property>  
    </bean> -->
    
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- 定义默认的异常处理页面，当该异常类型的注册时使用 -->
        <property name="defaultErrorView" value="error"></property>
        <!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->
        <!-- <property name="exceptionAttribute" value="ex"></property> -->
        <!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 -->
        <!-- <property name="exceptionMappings">
            <props>
                <prop key="IOException">error/ioexp</prop>
                <prop key="java.sql.SQLException">error/sqlexp</prop>
            </props>
        </property> -->
        <property name="warnLogCategory" value="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"></property>
    </bean>
</beans>
