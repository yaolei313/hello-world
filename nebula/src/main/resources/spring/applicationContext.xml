<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context-4.0.xsd ">

	<!-- 自动扫描的包名 -->
	<context:component-scan base-package="com.yao.app">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!-- 国际化 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="messages"></property>
		<!-- 多个文件时使用basenames属性 -->
		<!--<property name="basenames"> <list> <value>msg-normal</value> <value>msg-exceptions</value> 
			</list> </property> -->
	</bean>

	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        
        <property name="minIdle" value="2" />
        <property name="maxIdle" value="5" />
        <property name="maxActive" value="10" /> 
    	<property name="initialSize" value="5" />
    	
    	<property name="validationQuery" value="SELECT 1" />
    	<property name="testOnBorrow" value="true" />
    	<property name="testOnReturn" value="true" />
    	<property name="testWhileIdle" value="true" />
    </bean>

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 注解驱动事务 
    	spring解析xml时会向spring注册InfrastructureAdvisorAutoProxyCreator
    -->
    <tx:annotation-driven order="1" transaction-manager="transactionManager"/>

    <!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean 
        below) 
    	spring解析xml时会转换为AnnotationTransactionAttributeSource对象    
    -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 默认rollback-for RuntimeException，仅免检异常回滚 -->
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="query*" propagation="SUPPORTS" read-only="true" />
            <!-- <tx:method name="query*" read-only="true" /> -->
            <tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
        </tx:attributes>
    </tx:advice>

    <!-- proxy-target-class默认为false，即使用java的动态代理 
    spring解析xml配置时会向spring注册AspectJAwareAdvisorAutoProxyCreator
    -->
    <aop:config proxy-target-class="false">
        <aop:pointcut id="serviceOperation"
            expression="execution(* com.yao.app..service.impl.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" order="65535"/>
    </aop:config>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage" value="com.yao.app.nebula.domain"></property>
        <!-- <property name="configLocation" value="classpath:mybatis-config.xml"></property> -->
        <!-- 可以在mybatis-config.xml中配置 -->
        <!-- <property name="mapperLocations" value="classpath*:sample/config/mappers/**/*.xml" /> -->
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.yao.app.nebula.persistence" />
    </bean>
    
    <bean class="com.yao.app.nebula.util.ApplicationContextUtil" />
    
    <!-- <bean class="com.yao.app.nebula.web.vo.Student" scope="prototype" /> -->
    
    <bean class="com.yao.app.nebula.util.TraceAdvice" />
    <!-- Aspectj LTW -->
    <!-- <bean class="com.yao.app.nebula.util.ProfilingAspect" factory-method="aspectOf" lazy-init="false"/> -->
    <!-- for register AnnotationBeanConfigurerAspect -->
    <!-- <context:spring-configured/> -->
    <!-- spring解析xml配置时会向spring注册AnnotationAwareAspectJAutoProxyCreator.class -->
    <aop:aspectj-autoproxy>
    	<!-- Set a list of regex patterns, matching eligible @AspectJ bean names.Default is to consider all @AspectJ beans as eligible. -->
    	<!-- Example: com.yao.app.nebula.util.TraceAdvice#0 此次必须为正则表达式-->
    	<aop:include name="(\w+\.)*TraceAdvice(#\d)?"/>
    	<!-- <aop:include name="com.yao.app.nebula.util.ProfilingAspect"/> -->
    </aop:aspectj-autoproxy>
    
    <!-- <context:load-time-weaver/> -->

    <!--test-->
    <bean id="testA" class="com.yao.app.nebula.service.test.TestA" />

    <bean id="testB" class="com.yao.app.nebula.service.test.TestB" />

    <beans profile="dev">
		<context:property-placeholder location="classpath:jdbc-dev.properties" ignore-resource-not-found="false" />
   	</beans>
   	
   	<beans profile="prod">
		<context:property-placeholder location="classpath:jdbc-prod.properties" ignore-resource-not-found="false" />
   	</beans>

    <!-- 验证close顺序 -->

</beans>
