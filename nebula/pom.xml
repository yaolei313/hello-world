<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.yao.app</groupId>
	<artifactId>nebula</artifactId>
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>nebula</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		
		<mariadb.version>1.2.3</mariadb.version>
		<tomcat-jdbc.version>9.0.4</tomcat-jdbc.version>
		
		<slf4j.version>1.7.22</slf4j.version>
		<logback.version>1.1.8</logback.version>
		<log4jdbc.version>1.2</log4jdbc.version>
		
		<spring.version>5.0.6.RELEASE</spring.version>
		<aspectj.version>1.8.7</aspectj.version>
		<mybatis.version>3.4.5</mybatis.version>
		<mybatis-spring.version>1.3.1</mybatis-spring.version>

		<validation.version>2.0.1.Final</validation.version>
		<hibernate-validation.version>6.0.7.Final</hibernate-validation.version>
		<jackson.version>2.9.4</jackson.version>
		<!-- <cas.version>3.2.1</cas.version> -->
		<xstream.version>1.4.7</xstream.version>
        <metrics.version>3.1.0</metrics.version>
        <shiro.version>1.2.3</shiro.version>
        <stormpath.version>1.0.RC4.5</stormpath.version>
        <jetty.version>9.4.8.v20171121</jetty.version>
        <sitemesh.version>2.4.2</sitemesh.version>
        <hystrix.version>1.5.8</hystrix.version>
	</properties>
	
	<!-- 等同于dependencies中得spring配置，但此次会引入所有spring的包 -->
	<!-- <dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-framework-bom</artifactId>
				<version>${spring.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement> -->

	<dependencies>
		<!-- test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		
		<!-- assert for test -->
		<dependency>
		  	<groupId>org.assertj</groupId>
		  	<artifactId>assertj-core</artifactId>
		  	<!-- use 3.1.0 for Java 8 projects -->
		  	<version>3.2.0</version>
		  	<scope>test</scope>
		</dependency>

		<!-- db and datasource -->
		<dependency>
		    <groupId>org.mariadb.jdbc</groupId>
		    <artifactId>mariadb-java-client</artifactId>
		    <version>${mariadb.version}</version>
		    <scope>runtime</scope>
            <exclusions>
              <exclusion>
                <groupId>commons-dbcp</groupId>
                <artifactId>commons-dbcp</artifactId>
              </exclusion>
            </exclusions>
		</dependency>
		<dependency>
		    <groupId>org.apache.tomcat</groupId>
		    <artifactId>tomcat-jdbc</artifactId>
		    <version>${tomcat-jdbc.version}</version>
		</dependency>
		<!--  http://stackoverflow.com/questions/32643530/classpath-issue-between-jetty-maven-plugin-and-tomcat-jdbc-8-0-9-leading-to-ser -->
		<!-- 相当坑爹，用什么juli -->
		<dependency>
		    <groupId>org.apache.tomcat</groupId>
		    <artifactId>tomcat-juli</artifactId>
		    <version>${tomcat-jdbc.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>de.mklinger.tomcat</groupId>
			<artifactId>tomcat-juli-slf4j</artifactId>
			<version>8.5.11</version>
		</dependency>

		<!-- spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-aspects</artifactId>
		    <version>${spring.version}</version>
		</dependency>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-test</artifactId>
		    <version>${spring.version}</version>
		    <scope>test</scope>
		</dependency>
		<!-- 
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-oxm</artifactId>
		    <version>${spring.version}</version>
		</dependency>
		 -->
		<!-- 性能不如jaxb2，未验证 -->
		<!-- 
		<dependency>
		    <groupId>com.thoughtworks.xstream</groupId>
		    <artifactId>xstream</artifactId>
		    <version>${xstream.version}</version>
		</dependency>
		-->

		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${aspectj.version}</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${aspectj.version}</version>
		</dependency>

		<!-- Logging Begin -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<!-- At present time, logback is divided into three modules, logback-core, logback-classic and logback-access.
		logback-access非必须，The logback-access module integrates with Servlet containers, such as Tomcat and Jetty, 
		to provide HTTP-access log functionality. -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
		</dependency>
		<!-- Bridging Commons Logging API -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
			<!--<scope>runtime</scope>-->
		</dependency>
		<!-- Bridging Java Util Logging API -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
			<version>${slf4j.version}</version>
			<scope>runtime</scope>
		</dependency>
		<!-- Bridging Log4j API -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>log4j-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
			<scope>runtime</scope>
		</dependency>
		<!-- log4jdbc -->
		<dependency>
			<groupId>com.googlecode.log4jdbc</groupId>
			<artifactId>log4jdbc</artifactId>
			<version>${log4jdbc.version}</version>
			<scope>runtime</scope>
		</dependency>
		<!-- Logging End -->

		<!-- JSR 303 with Hibernate Validator -->
		<dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId> 
		    <version>${validation.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId> 
			<artifactId>hibernate-validator</artifactId>
            <version>${hibernate-validation.version}</version> 
		</dependency>

		<!-- mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>${mybatis-spring.version}</version>
		</dependency>

		<!-- spring mvc json -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		
		<!-- sitemesh -->
		<dependency>
			<groupId>opensymphony</groupId>
			<artifactId>sitemesh</artifactId>
            <version>${sitemesh.version}</version>
		</dependency>
    
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-core</artifactId>
            <version>${metrics.version}</version>
        </dependency>

        <!-- security-->
        <dependency>
		  	<groupId>org.apache.shiro</groupId>
		  	<artifactId>shiro-core</artifactId>
		  	<version>${shiro.version}</version>
		</dependency>
		<dependency>
		  	<groupId>org.apache.shiro</groupId>
		  	<artifactId>shiro-ehcache</artifactId>
		  	<version>${shiro.version}</version>
		</dependency>
		<dependency>
		  	<groupId>org.apache.shiro</groupId>
		  	<artifactId>shiro-spring</artifactId>
		  	<version>${shiro.version}</version>
		</dependency>
		<dependency>
		  	<groupId>org.apache.shiro</groupId>
		  	<artifactId>shiro-web</artifactId>
		  	<version>${shiro.version}</version>
		</dependency>

		<!-- stormpath realm-->
		<dependency>
		    <groupId>com.stormpath.sdk</groupId>
		    <artifactId>stormpath-sdk-api</artifactId>
		    <version>${stormpath.version}</version>
		</dependency>
		<dependency>
		    <groupId>com.stormpath.sdk</groupId>
		    <artifactId>stormpath-sdk-httpclient</artifactId>
		    <version>${stormpath.version}</version>
		    <scope>runtime</scope>
		</dependency>
		<!-- This next runtime dependency is only necessary if you have
		     a REST API and you want to secure it with OAuth: -->
		<dependency>
		    <groupId>com.stormpath.sdk</groupId>
		    <artifactId>stormpath-sdk-oauth</artifactId>
		    <version>${stormpath.version}</version>
		    <scope>runtime</scope>
		</dependency>
    
        <!-- 临时使用 -->
        <dependency>
          <groupId>com.stormpath.shiro</groupId>
          <artifactId>stormpath-shiro-core</artifactId>
          <version>0.6.0</version>
        </dependency>
        
        <!-- Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>javax.servlet.jsp-api</artifactId>
			<version>2.3.2-b02</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

		<!--
		7.x = Servlet 2.5
 		8.x = Servlet 3.0
 		9.x = Servlet 3.1
		10.x = Servlet 4.0
		-->
		<!-- embedded jetty -->
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-webapp</artifactId>
			<version>${jetty.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-client</artifactId>
			<version>${jetty.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-annotations</artifactId>
			<version>${jetty.version}</version>
		</dependency>
		<dependency>
		    <groupId>org.eclipse.jetty</groupId>
		    <artifactId>jetty-jmx</artifactId>
		    <version>${jetty.version}</version>
		</dependency>
		
		<!-- Hystrix is a latency and fault tolerance library designed 
		to isolate points of access to remote systems, services and 3rd party libraries, 
		stop cascading failure and enable resilience in complex distributed systems 
		where failure is inevitable. -->
		<dependency>
		    <groupId>com.netflix.hystrix</groupId>
		    <artifactId>hystrix-core</artifactId>
		    <version>${hystrix.version}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
    
	</dependencies>
	<build>
		<finalName>nebula</finalName>
		<plugins>
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>9.4.8.v20171121</version>
				<configuration>
					<scanIntervalSeconds>10</scanIntervalSeconds>
					<webApp>
						<contextPath>/nebula</contextPath>
					</webApp>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<!-- 此处没指定utf-8的话可能导致代码中的汉字乱码，即打印汉字时，非代码中写死的汉字不会乱码，写死的会乱码 -->
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.4.1</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <banDuplicateClasses>
                                    <ignoreClasses>
                                        <ignoreClass>javax.*</ignoreClass>
                                    </ignoreClasses>
                                    <findAllDuplicates>true</findAllDuplicates>
                                </banDuplicateClasses>
                            </rules>
                            <fail>false</fail>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>extra-enforcer-rules</artifactId>
                        <version>1.0-beta-7</version>
                    </dependency>
                </dependencies>
            </plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jspc-maven-plugin</artifactId>
				<version>1.4.6</version>
				<executions>
					<execution>
						<id>jspc</id>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
